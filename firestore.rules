/**
 * @fileoverview Firestore Security Rules for Medo.Ai Time Hub
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  Each user can only
 * access their own data, and no data is publicly accessible without authentication.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`.
 * - Uploaded files are stored under `/users/{userId}/uploadedFiles/{fileId}`.
 * - Mind map sessions are stored under `/users/{userId}/mindMapSessions/{sessionId}`.
 * - Question sessions are stored under `/users/{userId}/questionSessions/{sessionId}`.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user document.
 * - Users can only read, create, update, and delete files, mind maps, and question sessions that they own.
 * - Listing of user documents is not permitted.
 *
 * Denormalization for Authorization:
 *  - All subcollection documents contain the `userId` to simply authorization logic and avoid costly `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     * @allow (get) User with ID 'user123' can read their profile.
     * @allow (update) User with ID 'user123' can update their profile.
     * @allow (delete) User with ID 'user123' can delete their profile.
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     * @deny (get) User with ID 'user456' cannot read the profile of 'user123'.
     * @deny (update) User with ID 'user456' cannot update the profile of 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete the profile of 'user123'.
     * @deny (list) No one can list all users.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure access to uploaded files for each user.
     * @path /users/{userId}/uploadedFiles/{fileId}
     * @allow (create) User with ID 'user123' can create a file under their profile.
     * @allow (get) User with ID 'user123' can read their uploaded file.
     * @allow (update) User with ID 'user123' can update their uploaded file.
     * @allow (delete) User with ID 'user123' can delete their uploaded file.
     * @deny (create) User with ID 'user456' cannot create a file under 'user123' profile.
     * @deny (get) User with ID 'user456' cannot read the uploaded file of 'user123'.
     * @deny (update) User with ID 'user456' cannot update the uploaded file of 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete the uploaded file of 'user123'.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/uploadedFiles/{fileId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure access to mind map sessions for each user.
     * @path /users/{userId}/mindMapSessions/{sessionId}
     * @allow (create) User with ID 'user123' can create a mind map session under their profile.
     * @allow (get) User with ID 'user123' can read their mind map session.
     * @allow (update) User with ID 'user123' can update their mind map session.
     * @allow (delete) User with ID 'user123' can delete their mind map session.
     * @deny (create) User with ID 'user456' cannot create a mind map session under 'user123' profile.
     * @deny (get) User with ID 'user456' cannot read the mind map session of 'user123'.
     * @deny (update) User with ID 'user456' cannot update the mind map session of 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete the mind map session of 'user123'.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/mindMapSessions/{sessionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure access to question sessions for each user.
     * @path /users/{userId}/questionSessions/{sessionId}
     * @allow (create) User with ID 'user123' can create a question session under their profile.
     * @allow (get) User with ID 'user123' can read their question session.
     * @allow (update) User with ID 'user123' can update their question session.
     * @allow (delete) User with ID 'user123' can delete their question session.
     * @deny (create) User with ID 'user456' cannot create a question session under 'user123' profile.
     * @deny (get) User with ID 'user456' cannot read the question session of 'user123'.
     * @deny (update) User with ID 'user456' cannot update the question session of 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete the question session of 'user123'.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/questionSessions/{sessionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}