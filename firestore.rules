/**
 * @file Firebase Security Rules for Medo.Ai Time Hub - Question Generation Section
 * @core_philosophy This ruleset enforces a strict user-ownership model.
 *   Each user can only access and modify their own data.
 * @data_structure All data is nested under /users/{userId}, ensuring data isolation.
 *   - /users/{userId}: User profile information.
 *   - /users/{userId}/uploadedFiles/{fileId}: Files uploaded by the user.
 *   - /users/{userId}/mindMapSessions/{sessionId}: Mind map sessions created by the user.
 * @key_security_decisions
 *   - User listing is explicitly denied to protect user privacy.
 *   - Every write operation is protected by an authorization check to prevent unauthorized data modification.
 *   - Data consistency between the path and document fields is enforced on create and update.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Root-level access is denied.
     * @path /
     * @allow None. No operations are allowed at the root level.
     * @deny All operations.
     * @principle Prevents accidental data access or modification at the root level.
     */
    match /{document=**} {
      allow read, write: if false;
    }

    /**
     * @description Rules for the /users collection.
     *   Allows a user to create their own profile.
     *   After creation, only the user can read or modify their profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create a document where request.auth.uid == 'user123'.
     * @allow (get, update, delete) User with ID 'user123' can get, update, or delete their own profile.
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     * @deny (get, update, delete) User with ID 'user456' cannot access or modify profile of 'user123'.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /uploadedFiles collection.
     *   Allows a user to manage their own uploaded files.
     * @path /users/{userId}/uploadedFiles/{fileId}
     * @allow (create) User with ID 'user123' can create a file under their profile.
     * @allow (get, list, update, delete) User with ID 'user123' can manage their own files.
     * @deny (create) User with ID 'user456' cannot create a file for 'user123'.
     * @deny (get, list, update, delete) User with ID 'user456' cannot access or modify files of 'user123'.
     * @principle Enforces user-ownership for uploaded files.
     */
    match /users/{userId}/uploadedFiles/{fileId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /mindMapSessions collection.
     *   Allows a user to manage their own mind map sessions.
     * @path /users/{userId}/mindMapSessions/{sessionId}
     * @allow (create) User with ID 'user123' can create a session under their profile.
     * @allow (get, list, update, delete) User with ID 'user123' can manage their own sessions.
     * @deny (create) User with ID 'user456' cannot create a session for 'user123'.
     * @deny (get, list, update, delete) User with ID 'user456' cannot access or modify sessions of 'user123'.
     * @principle Enforces user-ownership for mind map sessions.
     */
    match /users/{userId}/mindMapSessions/{sessionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}