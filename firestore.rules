rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents. Only the authenticated user can read or modify their own profile.
     * @path /users/{userId}
     * @allow (create) - An authenticated user can create their profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - An authenticated user can get, update, and delete their profile if the userId matches their auth.uid.
     * @deny (create) - An unauthenticated user cannot create a profile.
     * @deny (update, delete) - An authenticated user cannot modify another user's profile.
     * @deny (list) - Listing all users is not permitted.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to uploaded files. Only the authenticated user can manage their own files.
     * @path /users/{userId}/uploadedFiles/{fileId}
     * @allow (create) - An authenticated user can create a file if the userId in the path matches their auth.uid.
     * @allow (get, list, update, delete) - An authenticated user can get, list, update, and delete their own files based on the userId in the path.
     * @deny (create) - Creating a file with a mismatched userId is not allowed.
     * @deny (update, delete) - Modifying or deleting another user's file is not allowed.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/uploadedFiles/{fileId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to mind map sessions. Only the authenticated user can manage their own sessions.
     * @path /users/{userId}/mindMapSessions/{sessionId}
     * @allow (create) - An authenticated user can create a session if the userId in the path matches their auth.uid.
     * @allow (get, list, update, delete) - An authenticated user can get, list, update, and delete their own sessions based on the userId in the path.
     * @deny (create) - Creating a session with a mismatched userId is not allowed.
     * @deny (update, delete) - Modifying or deleting another user's session is not allowed.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/mindMapSessions/{sessionId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to question sessions. Only the authenticated user can manage their own sessions.
     * @path /users/{userId}/questionSessions/{sessionId}
     * @allow (create) - An authenticated user can create a session if the userId in the path matches their auth.uid.
     * @allow (get, list, update, delete) - An authenticated user can get, list, update, and delete their own sessions based on the userId in the path.
     * @deny (create) - Creating a session with a mismatched userId is not allowed.
     * @deny (update, delete) - Modifying or deleting another user's session is not allowed.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/questionSessions/{sessionId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}