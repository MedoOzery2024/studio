/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model, ensuring that users can only access their own data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the user can read and write their own profile.
 * - /users/{userId}/uploadedFiles/{fileId}: Stores uploaded files and content created by each user. Only the user can manage their own files.
 * - /users/{userId}/mindMapSessions/{sessionId}: Stores mind map sessions for each user. Only the user can manage their own sessions.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete data under their own user ID.
 * - Data consistency is enforced by matching the `userId` in the path with the `userId` in the document data on creation.  The userId field cannot be changed after creation.
 * - The `list` operation is allowed for all user-scoped subcollections, allowing a user to list their own documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     *   Request data: `{id: 'user123', userName: 'testUser', email: 'test@example.com', registrationDate: '2024-01-01T00:00:00Z'}`.
     * @allow (get, update, delete) User with ID 'user123' can read/update/delete their profile.
     * @deny (create) User with ID 'user456' cannot create a profile with ID 'user123'.
     *   Request data: `{id: 'user123', userName: 'testUser', email: 'test@example.com', registrationDate: '2024-01-01T00:00:00Z'}`.
     * @deny (update) User with ID 'user456' cannot update user 'user123' profile.
     * @deny (delete) User with ID 'user456' cannot delete user 'user123' profile.
     * @principle Enforces document ownership, ensuring users can only manage their own profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource != null && request.resource.data.id == resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to uploaded files for each user.
     * @path /databases/{database}/documents/users/{userId}/uploadedFiles/{fileId}
     * @allow (create) User with ID 'user123' can create a file under their ID.
     *   Request data: `{id: 'file123', fileName: 'test.txt', fileType: 'text/plain', uploadDate: '2024-01-01T00:00:00Z', userId: 'user123'}`.
     * @allow (get, list, update, delete) User with ID 'user123' can read/list/update/delete their own files.
     * @deny (create) User with ID 'user456' cannot create a file under user 'user123''s ID.
     *   Request data: `{id: 'file123', fileName: 'test.txt', fileType: 'text/plain', uploadDate: '2024-01-01T00:00:00Z', userId: 'user123'}`.
     * @deny (update) User with ID 'user456' cannot update a file belonging to user 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete a file belonging to user 'user123'.
     * @principle Enforces document ownership, ensuring users can only manage their own files.
     */
    match /users/{userId}/uploadedFiles/{fileId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId && request.resource.data.id == fileId;
      allow update: if isOwner(userId) && resource != null && request.resource.data.userId == resource.data.userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to mind map sessions for each user.
     * @path /databases/{database}/documents/users/{userId}/mindMapSessions/{sessionId}
     * @allow (create) User with ID 'user123' can create a mind map session under their ID.
     *   Request data: `{id: 'session123', fileName: 'My Mind Map', mindMapData: {title: 'Test'}, uploadDate: '2024-01-01T00:00:00Z', userId: 'user123'}`.
     * @allow (get, list, update, delete) User with ID 'user123' can read/list/update/delete their own mind map sessions.
     * @deny (create) User with ID 'user456' cannot create a mind map session under user 'user123''s ID.
     *   Request data: `{id: 'session123', fileName: 'My Mind Map', mindMapData: {title: 'Test'}, uploadDate: '2024-01-01T00:00:00Z', userId: 'user123'}`.
     * @deny (update) User with ID 'user456' cannot update a mind map session belonging to user 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete a mind map session belonging to user 'user123'.
     * @principle Enforces document ownership, ensuring users can only manage their own mind map sessions.
     */
    match /users/{userId}/mindMapSessions/{sessionId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId && request.resource.data.id == sessionId;
      allow update: if isOwner(userId) && resource != null && request.resource.data.userId == resource.data.userId;
      allow delete: if isOwner(userId) && resource != null;
    }
  }
}