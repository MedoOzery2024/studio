/**
 * @file Overview
 * This ruleset enforces a strict user-ownership model for all data.
 * All data is nested under /users/{userId}, and only the authenticated user matching {userId} can read or write to that data.
 *
 * @data-structure
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/uploadedFiles/{fileId}: Stores files and text content created by each user.
 * - /users/{userId}/mindMapSessions/{sessionId}: Stores mind map sessions for each user.
 *
 * @key-security-decisions
 * - Users can only access their own data.
 * - Listing of users is disallowed.
 *
 * @denormalization-rationale
 * The 'userId' field is included in the UploadedFile and MindMapSession documents to avoid needing to perform additional reads to verify ownership. The alternative would be to query the /users/{userId} document from a rule on the subcollection, which is not possible.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - Authenticated user can only access their own profile.
     * @deny (create) - If the authenticated user's ID doesn't match the userId in the path.
     * @deny (get, update, delete) - If the authenticated user's ID doesn't match the userId in the path.
     * @deny (list) - Listing all users is disallowed.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for uploaded files within a user's profile.
     * @path /users/{userId}/uploadedFiles/{fileId}
     * @allow (create, get, list, update, delete) - Authenticated user can only access their own uploaded files.
     * @deny (create, get, list, update, delete) - If the authenticated user's ID doesn't match the userId in the path.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/uploadedFiles/{fileId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for mind map sessions within a user's profile.
     * @path /users/{userId}/mindMapSessions/{sessionId}
     * @allow (create, get, list, update, delete) - Authenticated user can only access their own mind map sessions.
     * @deny (create, get, list, update, delete) - If the authenticated user's ID doesn't match the userId in the path.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/mindMapSessions/{sessionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}