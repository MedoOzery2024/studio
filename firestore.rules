/**
 * @fileoverview Firestore Security Rules for Medo.Ai Time Hub.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles, uploaded files, and mind map sessions.
 * Each user can only access and modify their own data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user themselves.
 * - /users/{userId}/uploadedFiles/{fileId}: Stores uploaded files, accessible only by the owning user.
 * - /users/{userId}/mindMapSessions/{sessionId}: Stores mind map sessions, accessible only by the owning user.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - All data is private by default and must be explicitly allowed.
 * - Write operations on user-owned data require the authenticated user's ID to match the path's user ID.
 * - In this prototyping phase, data validation is relaxed to allow for rapid schema iteration, focusing only on ownership and relational integrity.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile information.
     * @path /users/{userId}
     * @allow (create) User with ID 'user_abc' can create their profile.
     * @allow (get) User with ID 'user_abc' can read their profile.
     * @allow (update) User with ID 'user_abc' can update their profile.
     * @allow (delete) User with ID 'user_abc' can delete their profile.
     * @deny (create) User with ID 'user_xyz' cannot create a profile for 'user_abc'.
     * @deny (get) User with ID 'user_xyz' cannot read profile of 'user_abc'.
     * @deny (update) User with ID 'user_xyz' cannot update profile of 'user_abc'.
     * @deny (delete) User with ID 'user_xyz' cannot delete profile of 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects uploaded files for each user.
     * @path /users/{userId}/uploadedFiles/{fileId}
     * @allow (create) User with ID 'user_abc' can create a file.
     * @allow (get) User with ID 'user_abc' can read their file.
     * @allow (update) User with ID 'user_abc' can update their file.
     * @allow (delete) User with ID 'user_abc' can delete their file.
     * @deny (create) User with ID 'user_xyz' cannot create a file for 'user_abc'.
     * @deny (get) User with ID 'user_xyz' cannot read file of 'user_abc'.
     * @deny (update) User with ID 'user_xyz' cannot update file of 'user_abc'.
     * @deny (delete) User with ID 'user_xyz' cannot delete file of 'user_abc'.
     * @principle Enforces document ownership and relational integrity for uploaded files.
     */
    match /users/{userId}/uploadedFiles/{fileId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects mind map sessions for each user.
     * @path /users/{userId}/mindMapSessions/{sessionId}
     * @allow (create) User with ID 'user_abc' can create a mind map session.
     * @allow (get) User with ID 'user_abc' can read their mind map session.
     * @allow (update) User with ID 'user_abc' can update their mind map session.
     * @allow (delete) User with ID 'user_abc' can delete their mind map session.
     * @deny (create) User with ID 'user_xyz' cannot create a mind map session for 'user_abc'.
     * @deny (get) User with ID 'user_xyz' cannot read mind map session of 'user_abc'.
     * @deny (update) User with ID 'user_xyz' cannot update mind map session of 'user_abc'.
     * @deny (delete) User with ID 'user_xyz' cannot delete mind map session of 'user_abc'.
     * @principle Enforces document ownership and relational integrity for mind map sessions.
     */
    match /users/{userId}/mindMapSessions/{sessionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}